@page "/"

<PageTitle>FlySight Webtool</PageTitle>

@using FlySightWebTool.Data
@using System.Text

@inject TrackService TrackService
@inject IJSRuntime JS

<h1>Track</h1>
<p><InputFile OnChange="HandleFileSelected" accept=".csv" /></p>
<div id="plotlyChart" style="width:100%; height:800px;"></div>
<div style="display: flex;">
    <div style="flex: 1; padding: 10px;">
        @if (track == null)
        {
            <h3>@message</h3>
            <table id="stats" class="table">
                <tbody>            
                    <tr>
                        <th>Exit</th>
                        <td></td>
                        <th>Landing</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th>Pitch</th>
                        <td></td>
                        <th>DZ Elevation offset</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th>Flight time</th>
                        <td></td>
                        <th>Total time</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th>Total speed (Max)</th>
                        <td></td>
                        <th>Total speed (Min)</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th>Ground speed (Max)</th>
                        <td></td>
                        <th>Track length</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th>Glide ratio (Max)</th>
                        <td></td>
                        <th>Glide ratio (Avg)</th>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <h3>@track.TakeOffDateTime.ToString("HH:mm (d MMMM yyyy)")</h3>
            <table id="stats" class="table">
                <tbody>            
                    <tr>
                        <th>Exit</th>
                        <td>@track.ExitHeight.ToString("F0")m AGL at @track.ExitDateTime.ToString("HH:mm")</td>
                        <th>Landing</th>
                        <td>@track.LandingTime.ToString("HH:mm")</td>
                    </tr>
                    <tr>
                        <th>Pitch</th>
                        <td>@track.PitchHeight.ToString("F0")m AGL at @track.PitchDateTime.ToString("HH:mm")</td>
                        <th>DZ Elevation offset</th>
                        <td>@track.DzAltitude.ToString("F0")m AMSL</td>
                    </tr>
                    <tr>
                        <th>Flight time</th>
                        <td>@track.FlightTime.ToString("F0")s over @((track.ExitAltitude - track.PitchAltitude).ToString("F0"))m</td>
                        <th>Total time</th>
                        <td>@((track.LandingTime - track.TakeOffDateTime).TotalMinutes.ToString("F0"))min</td>
                    </tr>
                    <tr>
                        <th>Total speed (Max)</th>
                        <td>@track.VelocityTotalMax.ToString("F0") km/h</td>
                        <th>Total speed (Min)</th>
                        <td>@track.VelocityTotalMin.ToString("F0") km/h</td>
                    </tr>
                    <tr>
                        <th>Ground speed (Max)</th>
                        <td>@track.VelocityGroundMax.ToString("F0") km/h</td>
                        <th>Track length</th>
                        <td>@track.HorizontalDistance.ToString("F0") km</td>
                    </tr>
                    <tr>
                        <th>Glide ratio (Max)</th>
                        <td>@track.GlideRatioMax.ToString("F1")</td>
                        <th>Glide ratio (Avg)</th>
                        <td>@(((track.HorizontalDistance) / (track.ExitAltitude - track.PitchAltitude)).ToString("F1"))</td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
    <div style="flex: 1; padding: 10px;">
        <div id="map" style="width:100%; height:300px;"></div>
    </div>
</div>

@code {
    private Track? track;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        message = "Reading file..."; //Reading file
        this.StateHasChanged();

        var file = e.File;

        if (file == null) 
            throw new Exception($"File object is null");

        StringBuilder fileContent = new StringBuilder();

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB

            using var reader = new StreamReader(stream);

            char[] buffer = new char[8192]; // 8 KB buffer
            int bytesRead;

            while ((bytesRead = await reader.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                fileContent.Append(buffer, 0, bytesRead);
            }

            message = "Computing..."; //Calculating
            this.StateHasChanged();

            track = await TrackService.LoadTrackFromFileAsync(fileContent.ToString());

            if (track.Data.Count == 0)
            {
                message = "No data";
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error reading file: {file.Name}, {ex.Message}");
        }        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            await JS.InvokeVoidAsync("initializeMap");
        }
        else
        {
            if (track == null || track.Data.Count == 0)
                return;

            var plotlyDatasource = new PlotlyDatasource(track);
            var data = plotlyDatasource.getData();
            var layout = plotlyDatasource.getLayout();

            //Load chart data
            await JS.InvokeVoidAsync("plotlyInterop.createChart", "plotlyChart", data, layout);

            //Load map data
            var coordinates = track.Data.Select(d => new { lat = d.Latitude, lng = d.Longitude }).ToList();
            await JS.InvokeVoidAsync("drawPathOnMap", coordinates);
        }
    }
}